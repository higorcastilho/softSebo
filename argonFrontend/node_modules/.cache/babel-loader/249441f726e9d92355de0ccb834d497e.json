{"remainingRequest":"/home/hc/softSebo/argonFrontend/node_modules/babel-loader/lib/index.js!/home/hc/softSebo/argonFrontend/node_modules/eslint-loader/index.js??ref--13-0!/home/hc/softSebo/argonFrontend/src/store/auth.module.js","dependencies":[{"path":"/home/hc/softSebo/argonFrontend/src/store/auth.module.js","mtime":1594019223715},{"path":"/home/hc/softSebo/argonFrontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hc/softSebo/argonFrontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/hc/softSebo/argonFrontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import AuthService from \"../services/auth.service\";\nvar user = JSON.parse(localStorage.getItem('user'));\nvar initialState = user ? {\n  status: {\n    loggedIn: true\n  },\n  user: user\n} : {\n  status: {\n    loggedIn: false\n  },\n  user: null\n};\nexport var auth = {\n  namespaced: true,\n  state: initialState,\n  actions: {\n    login: function login(_ref, user) {\n      var commit = _ref.commit;\n      return AuthService.login(user).then(function (user) {\n        commit('loginSuccess', user);\n        return Promise.resolve(user);\n      }, function (error) {\n        commit('loginFailure');\n        return Promise.reject(error);\n      });\n    },\n    logout: function logout(_ref2) {\n      var commit = _ref2.commit;\n      AuthService.logout();\n      commit('logout');\n    },\n    register: function register(_ref3, user) {\n      var commit = _ref3.commit;\n      return AuthService.register(user).then(function (response) {\n        commit('registerSuccess');\n        return Promise.resolve(response.data);\n      }, function (error) {\n        commit('registerFailure');\n        return Promise.reject(error);\n      });\n    }\n  },\n  mutations: {\n    loginSuccess: function loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    loginFailure: function loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    logout: function logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    registerSuccess: function registerSuccess(state) {\n      state.status.loggedIn = false;\n    },\n    registerFailure: function registerFailure(state) {\n      state.status.loggedIn = false;\n    }\n  }\n};",{"version":3,"sources":["/home/hc/softSebo/argonFrontend/src/store/auth.module.js"],"names":["AuthService","user","JSON","parse","localStorage","getItem","initialState","status","loggedIn","auth","namespaced","state","actions","login","commit","then","Promise","resolve","error","reject","logout","register","response","data","mutations","loginSuccess","loginFailure","registerSuccess","registerFailure"],"mappings":"AAAA,OAAOA,WAAP;AAEA,IAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AACA,IAAMC,YAAY,GAAGL,IAAI,GACtB;AAAEM,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAV;AAA8BP,EAAAA,IAAI,EAAJA;AAA9B,CADsB,GAEtB;AAAEM,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAV;AAA+BP,EAAAA,IAAI,EAAE;AAArC,CAFH;AAIA,OAAO,IAAMQ,IAAI,GAAG;AACnBC,EAAAA,UAAU,EAAE,IADO;AAEnBC,EAAAA,KAAK,EAAEL,YAFY;AAGnBM,EAAAA,OAAO,EAAE;AACRC,IAAAA,KADQ,uBACUZ,IADV,EACgB;AAAA,UAAhBa,MAAgB,QAAhBA,MAAgB;AACvB,aAAOd,WAAW,CAACa,KAAZ,CAAkBZ,IAAlB,EAAwBc,IAAxB,CACN,UAAAd,IAAI,EAAI;AACPa,QAAAA,MAAM,CAAC,cAAD,EAAiBb,IAAjB,CAAN;AACA,eAAOe,OAAO,CAACC,OAAR,CAAgBhB,IAAhB,CAAP;AACA,OAJK,EAKN,UAAAiB,KAAK,EAAI;AACRJ,QAAAA,MAAM,CAAC,cAAD,CAAN;AACA,eAAOE,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACA,OARK,CAAP;AAUA,KAZO;AAcRE,IAAAA,MAdQ,yBAcW;AAAA,UAAVN,MAAU,SAAVA,MAAU;AAClBd,MAAAA,WAAW,CAACoB,MAAZ;AACAN,MAAAA,MAAM,CAAC,QAAD,CAAN;AACA,KAjBO;AAmBRO,IAAAA,QAnBQ,2BAmBapB,IAnBb,EAmBmB;AAAA,UAAhBa,MAAgB,SAAhBA,MAAgB;AAC1B,aAAOd,WAAW,CAACqB,QAAZ,CAAqBpB,IAArB,EAA2Bc,IAA3B,CACN,UAAAO,QAAQ,EAAI;AACXR,QAAAA,MAAM,CAAC,iBAAD,CAAN;AACA,eAAOE,OAAO,CAACC,OAAR,CAAgBK,QAAQ,CAACC,IAAzB,CAAP;AACA,OAJK,EAKN,UAAAL,KAAK,EAAI;AACRJ,QAAAA,MAAM,CAAC,iBAAD,CAAN;AACA,eAAOE,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACA,OARK,CAAP;AAUA;AA9BO,GAHU;AAmCnBM,EAAAA,SAAS,EAAE;AACVC,IAAAA,YADU,wBACGd,KADH,EACUV,IADV,EACgB;AACzBU,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,IAAxB;AACAG,MAAAA,KAAK,CAACV,IAAN,GAAaA,IAAb;AACA,KAJS;AAKVyB,IAAAA,YALU,wBAKGf,KALH,EAKU;AACnBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACAG,MAAAA,KAAK,CAACV,IAAN,GAAa,IAAb;AACA,KARS;AASVmB,IAAAA,MATU,kBASHT,KATG,EASI;AACbA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACAG,MAAAA,KAAK,CAACV,IAAN,GAAa,IAAb;AACA,KAZS;AAaV0B,IAAAA,eAbU,2BAaMhB,KAbN,EAaa;AACtBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACA,KAfS;AAgBVoB,IAAAA,eAhBU,2BAgBMjB,KAhBN,EAgBa;AACtBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACA;AAlBS;AAnCQ,CAAb","sourcesContent":["import AuthService from '../services/auth.service'\n\nconst user = JSON.parse(localStorage.getItem('user'))\nconst initialState = user\n\t? { status: { loggedIn: true }, user }\n\t: { status: { loggedIn: false }, user: null }\n\nexport const auth = {\n\tnamespaced: true,\n\tstate: initialState,\n\tactions: {\n\t\tlogin({ commit }, user) {\n\t\t\treturn AuthService.login(user).then(\n\t\t\t\tuser => {\n\t\t\t\t\tcommit('loginSuccess', user)\n\t\t\t\t\treturn Promise.resolve(user)\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\tcommit('loginFailure')\n\t\t\t\t\treturn Promise.reject(error)\n\t\t\t\t}\n\t\t\t)\n\t\t},\n\n\t\tlogout({ commit }) {\n\t\t\tAuthService.logout()\n\t\t\tcommit('logout')\n\t\t},\n\n\t\tregister({ commit }, user) {\n\t\t\treturn AuthService.register(user).then(\n\t\t\t\tresponse => {\n\t\t\t\t\tcommit('registerSuccess')\n\t\t\t\t\treturn Promise.resolve(response.data)\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\tcommit('registerFailure')\n\t\t\t\t\treturn Promise.reject(error)\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t},\n\tmutations: {\n\t\tloginSuccess(state, user) {\n\t\t\tstate.status.loggedIn = true\n\t\t\tstate.user = user\n\t\t},\n\t\tloginFailure(state) {\n\t\t\tstate.status.loggedIn = false\n\t\t\tstate.user = null\n\t\t},\n\t\tlogout(state) {\n\t\t\tstate.status.loggedIn = false\n\t\t\tstate.user = null\n\t\t},\n\t\tregisterSuccess(state) {\n\t\t\tstate.status.loggedIn = false\n\t\t},\n\t\tregisterFailure(state) {\n\t\t\tstate.status.loggedIn = false\n\t\t}\n\t}\n\n}"]}]}